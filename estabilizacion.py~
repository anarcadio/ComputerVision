#!/usr/bin/env python

import numpy as np
import cv2
import cv

# params for ShiTomasi corner detection
feature_params = dict( maxCorners = 10000,
                       qualityLevel = 0.001,
                       minDistance = 5,
                       blockSize = 3 )

# Parameters for lucas kanade optical flow
lk_params = dict( winSize  = (500,500),
                  maxLevel = 4,
                  criteria = (cv2.TERM_CRITERIA_EPS , 10, 0.001))

if __name__ == '__main__':

    import sys
    try: 
        name = sys.argv[1]
        nout = sys.argv[2]
    except: 
        print("Error, introduce los nombre de los ficheros de entrada y salida")
        sys.exit()
    cap = cv2.VideoCapture(name)
    fps = cap.get(cv2.cv.CV_CAP_PROP_FPS)
    print fps
    fps=30
    size = (int(cap.get( cv.CV_CAP_PROP_FRAME_WIDTH)),int(cap.get(cv.CV_CAP_PROP_FRAME_HEIGHT)))
    writer = cv2.VideoWriter(nout, cv.CV_FOURCC('M','J','P','G'), fps, size)


    # Create some random colors
    color = np.random.randint(0,255,(10000,3))
    
    draw = False

    # Take first frame and find corners in it
    ret, old_frame = cap.read()
    old_gray = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)
    p0 = cv2.goodFeaturesToTrack(old_gray, mask = None, **feature_params)

    # Create a mask image for drawing purposes
    mask = np.zeros_like(old_frame)

    writer.write(old_frame)
    ret,frame = cap.read()

    while(ret):
        overlay = frame.copy()
        frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        # calculate optical flow
        p1, st, err = cv2.calcOpticalFlowPyrLK(old_gray, frame_gray, p0, None, **lk_params)
    
        # Select good points
        good_new = p1[st==1]
        good_old = p0[st==1]

        h, w = old_frame.shape[:2]
	try:
        	H, status = cv2.findHomography(good_old, good_new, cv2.RANSAC, 0)
        	old_frame = cv2.warpPerspective(frame, H, (w, h),  flags=cv2.INTER_LINEAR + cv2.WARP_INVERSE_MAP)
	except:
		old_frame = frame.copy()
        writer.write(old_frame)

        # Now update the previous frame and previous points

        old_gray = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)
        p0 = cv2.goodFeaturesToTrack(old_gray, mask = None, **feature_params)

        ret,frame = cap.read()


    cv2.destroyAllWindows()
    cap.release()
